// Code generated by ogen, DO NOT EDIT.

package outline

import (
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/validate"
)

func decodeAccessKeysGetResponse(resp *http.Response) (res *AccessKeysGetOK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response AccessKeysGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeAccessKeysIDDataLimitDeleteResponse(resp *http.Response) (res AccessKeysIDDataLimitDeleteRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &AccessKeysIDDataLimitDeleteNoContent{}, nil
	case 404:
		// Code 404.
		return &AccessKeysIDDataLimitDeleteNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeAccessKeysIDDataLimitPutResponse(resp *http.Response) (res AccessKeysIDDataLimitPutRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &AccessKeysIDDataLimitPutNoContent{}, nil
	case 400:
		// Code 400.
		return &AccessKeysIDDataLimitPutBadRequest{}, nil
	case 404:
		// Code 404.
		return &AccessKeysIDDataLimitPutNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeAccessKeysIDDeleteResponse(resp *http.Response) (res AccessKeysIDDeleteRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &AccessKeysIDDeleteNoContent{}, nil
	case 404:
		// Code 404.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response AccessKeysIDDeleteNotFound
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeAccessKeysIDGetResponse(resp *http.Response) (res AccessKeysIDGetRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response AccessKey
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 404:
		// Code 404.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response AccessKeysIDGetNotFound
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeAccessKeysIDNamePutResponse(resp *http.Response) (res AccessKeysIDNamePutRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &AccessKeysIDNamePutNoContent{}, nil
	case 404:
		// Code 404.
		return &AccessKeysIDNamePutNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeAccessKeysIDPutResponse(resp *http.Response) (res *AccessKey, _ error) {
	switch resp.StatusCode {
	case 201:
		// Code 201.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response AccessKey
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeAccessKeysPostResponse(resp *http.Response) (res *AccessKey, _ error) {
	switch resp.StatusCode {
	case 201:
		// Code 201.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response AccessKey
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeExperimentalAccessKeyDataLimitDeleteResponse(resp *http.Response) (res *ExperimentalAccessKeyDataLimitDeleteNoContent, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &ExperimentalAccessKeyDataLimitDeleteNoContent{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeExperimentalAccessKeyDataLimitPutResponse(resp *http.Response) (res ExperimentalAccessKeyDataLimitPutRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &ExperimentalAccessKeyDataLimitPutNoContent{}, nil
	case 400:
		// Code 400.
		return &ExperimentalAccessKeyDataLimitPutBadRequest{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeExperimentalAsnMetricsEnabledPutResponse(resp *http.Response) (res ExperimentalAsnMetricsEnabledPutRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &ExperimentalAsnMetricsEnabledPutNoContent{}, nil
	case 400:
		// Code 400.
		return &ExperimentalAsnMetricsEnabledPutBadRequest{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeMetricsEnabledGetResponse(resp *http.Response) (res *MetricsEnabledGetOK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response MetricsEnabledGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeMetricsEnabledPutResponse(resp *http.Response) (res MetricsEnabledPutRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &MetricsEnabledPutNoContent{}, nil
	case 400:
		// Code 400.
		return &MetricsEnabledPutBadRequest{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeMetricsTransferGetResponse(resp *http.Response) (res *MetricsTransferGetOK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response MetricsTransferGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeNamePutResponse(resp *http.Response) (res NamePutRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &NamePutNoContent{}, nil
	case 400:
		// Code 400.
		return &NamePutBadRequest{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeServerAccessKeyDataLimitDeleteResponse(resp *http.Response) (res *ServerAccessKeyDataLimitDeleteNoContent, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &ServerAccessKeyDataLimitDeleteNoContent{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeServerAccessKeyDataLimitPutResponse(resp *http.Response) (res ServerAccessKeyDataLimitPutRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &ServerAccessKeyDataLimitPutNoContent{}, nil
	case 400:
		// Code 400.
		return &ServerAccessKeyDataLimitPutBadRequest{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeServerGetResponse(resp *http.Response) (res *Server, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response Server
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeServerHostnameForAccessKeysPutResponse(resp *http.Response) (res ServerHostnameForAccessKeysPutRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &ServerHostnameForAccessKeysPutNoContent{}, nil
	case 400:
		// Code 400.
		return &ServerHostnameForAccessKeysPutBadRequest{}, nil
	case 500:
		// Code 500.
		return &ServerHostnameForAccessKeysPutInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeServerPortForNewAccessKeysPutResponse(resp *http.Response) (res ServerPortForNewAccessKeysPutRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &ServerPortForNewAccessKeysPutNoContent{}, nil
	case 400:
		// Code 400.
		return &ServerPortForNewAccessKeysPutBadRequest{}, nil
	case 409:
		// Code 409.
		return &ServerPortForNewAccessKeysPutConflict{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}
